"""
Lookup tables for RISC-V instructions.
Contains a table referencing all instructions covered by the disassembler.
"""

from typing import Dict, List

INSTR_FORMAT_BY_OPC: Dict[int, str] = {
    0x0: "C",  # c.addi4spn, c.lw, c.ld, c.sw, c.sd
    0x1: "C",  # c.nop, c.addi, c.jal, c.addiw, c.li, c.addi16sp, c.lui,
    #            c.srli, c.srli64, c.srai, c.srai64, c.andi, c.sub, c.xor,
    #            c.or, c.and, c.subw, c.addw, c.j, c.beqz, c.bnez
    0x2: "C",  # c.slli, c.slli64, c.lwsp, c.ldsp, c.lqsp, c.jr, c.mv, c.ebreak,
    #            c.jalr, c.add, c.swsp, c.sdsp, c.sqsp
    0x3: "I",  # lb, lh, lw, lbu, lhu, lwu, ld
    0x7: "I",  # flw, fld, flq
    0xF: "I",  # fence, fence.i
    0x13: "I",  # addi, slli, slti, sltiu, xori, srli, srai, ori, andi
    0x17: "U",  # auipc
    0x1B: "I",  # addiw, slliw, srliw, sraiw
    0x23: "S",  # sb, sh, sw, sd
    0x27: "S",  # fsw, fsd, fsq
    0x2F: "R",  # 32A: lr.w, sc.w, amoswap.w, amoadd.w, amoxor.w, amoand.w,
    #                  amoor.w, amomin.w, amomax.w, amominu.w, amomaxu.w
    #             64A: lr.d, sc.d, amoswap.d, amoadd.d, amoxor.d, amoand.d,
    #                  amoor.d, amomin.d, amomax.d, amominu.d, amomaxu.d
    0x33: "R",  # add, sub, sll, slt, sltu, xor, srl, sra, or, and, mul, mulh,
    #             mulhsu, mulhu, div, divu, rem, remu
    0x37: "U",  # lui
    0x3B: "R",  # addw, subw, sllw, srlw, sraw, mulw, divw, divuw, remw, remuw
    0x43: "R4",  # fmadd.s, fmadd.d, fmadd.q
    0x47: "R4",  # fmsub.s, fmsub.d, fmsub.q
    0x4B: "R4",  # fnmsub.s, fnmsub.d, fnmsub.q
    0x4F: "R4",  # fnmadd.s, fnmadd.d, fnmadd.q
    0x53: "R",  # RV32FDQ / RV64FDQ
    0x63: "B",  # beq, bne, blt, bge, bltu, bgeu
    0x67: "I",  # jalr
    0x6F: "J",  # jal
    0x73: "I",  # ecall, cflush.d.l1, ebreak, sret, mret, wfi, csrrw, csrrs,
    #             csrrc, csrrwi, csrrsi, csrrci
}

C_OPCODES: List[int] = [0x0, 0x1, 0x2]
FDQ_OPCODES: List[int] = [0x7, 0x27, 0x43, 0x47, 0x4B, 0x4F, 0x53]

INSTR_BY_CODES = {
    0x3: {  # funct3
        0x0: "lb",
        0x1: "lh",
        0x2: "lw",
        0x3: "ld",
        0x4: "lbu",
        0x5: "lhu",
        0x6: "lwu",
    },
    0xF: {
        0x0: "fence",
        0x1: "fence.i",
    },
    0x13: {  # funct3
        0x0: "addi",
        0x1: "slli",
        0x2: "slti",
        0x3: "sltiu",
        0x4: "xori",
        0x5: {  # imm
            0x00: "srli",
            0x20: "srai",
        },
        0x6: "ori",
        0x7: "andi",
    },
    0x17: "auipc",  # just opcode
    0x1B: {
        0x0: "addiw",
        0x1: "slliw",
        0x5: {  # imm
            0x00: "srliw",
            0x20: "sraiw",
        },
    },
    0x23: {  # funct3
        0x0: "sb",
        0x1: "sh",
        0x2: "sw",
        0x3: "sd",
    },
    0x2F: {
        0x2: {  # funct5
            0x2: "lr.w",
            0x3: "sc.w",
            0x1: "amoswap.w",
            0x0: "amoadd.w",
            0x4: "amoxor.w",
            0xC: "amoand.w",
            0x8: "amoor.w",
            0x10: "amomin.w",
            0x14: "amomax.w",
            0x18: "amominu.w",
            0x1C: "amomaxu.w",
        },
        0x3: {  # funct5
            0x2: "lr.d",
            0x3: "sc.d",
            0x1: "amoswap.d",
            0x0: "amoadd.d",
            0x4: "amoxor.d",
            0xC: "amoand.d",
            0x8: "amoor.d",
            0x10: "amomin.d",
            0x14: "amomax.d",
            0x18: "amominu.d",
            0x1C: "amomaxu.d",
        },
    },
    0x33: {
        0x0: {  # funct7
            0x0: "add",
            0x1: "mul",
            0x20: "sub",
        },
        0x1: {
            0x0: "sll",
            0x1: "mulh",
        },
        0x2: {
            0x0: "slt",
            0x1: "mulhsu",
        },
        0x3: {
            0x0: "sltu",
            0x1: "mulhu",
        },
        0x4: {
            0x0: "xor",
            0x1: "div",
        },
        0x5: {  # funct7
            0x0: "srl",
            0x1: "divu",
            0x20: "sra",
        },
        0x6: {
            0x0: "or",
            0x1: "rem",
        },
        0x7: {
            0x0: "and",
            0x1: "remu",
        },
    },
    0x37: "lui",  # just opcode
    0x3B: {  # funct3
        0x0: {  # funct7
            0x00: "addw",
            0x01: "mulw",
            0x20: "subw",
        },
        0x1: "sllw",
        0x4: "divw",
        0x5: {  # funct7
            0x00: "srlw",
            0x01: "divuw",
            0x20: "sraw",
        },
        0x6: "remw",
        0x7: "remuw",
    },
    0x63: {
        0x0: "beq",
        0x1: "bne",
        0x4: "blt",
        0x5: "bge",
        0x6: "bltu",
        0x7: "bgeu",
    },
    0x67: "jalr",  # just opcode
    0x6F: "jal",  # just opcode
    0x73: {  # funct3
        0x0: {  # immediate
            0x000: "ecall",
            0x001: "ebreak",
            0x102: "sret",
            0x105: "wfi",
            0x180: "sfence.w.inval",
            0x181: "sfence.inval.ir",
            0x302: "mret",
            0xFC0: "cflush.d.l1",
            # funct7
            0x9: "sfence.vma",
            0xB: "sinval.vma",
            0x11: "hfence.vvma",
            0x13: "hinval.vvma",
            0x31: "hfence.gvma",
            0x33: "hinval.gvma",
        },
        0x1: "csrrw",
        0x2: "csrrs",
        0x3: "csrrc",
        0x4: {  # immediate
            0x600: "hlv.b",
            0x601: "hlv.bu",
            0x640: "hlv.h",
            0x641: "hlv.hu",
            0x643: "hlvx.hu",
            0x680: "hlv.w",
            0x681: "hlv.wu",
            0x683: "hlvx.wu",
            0x6C0: "hlv.d",
            # funct7
            0x31: "hsv.b",
            0x33: "hsv.h",
            0x35: "hsv.w",
            0x37: "hsv.d",
        },
        0x5: "csrrwi",
        0x6: "csrrsi",
        0x7: "csrrci",
    },
}

C_INSTR_BY_CODES = (
    {  # outer is opcode, first inner is funct3, second is funct7 (or immediate)
        0x0: {  # funct3
            0x0: ("c.addi4spn", "CIW"),
            0x1: ("c.lq", "CL"),
            0x2: ("c.lw", "CL"),
            0x3: ("c.ld", "CL"),
            0x5: ("c.sq", "CS"),
            0x6: ("c.sw", "CS"),
            0x7: ("c.sd", "CS"),
        },
        0x1: {  # funct3
            0x0: ("c.addi", "CI"),
            0x1: {  # [11:7]
                0x0: ("c.jal", "CJ"),
                0x1: ("c.addiw", "CI"),  # or any != 0
            },
            0x2: ("c.li", "CI"),
            0x3: {  # [11:7]
                0x2: ("c.addi16sp", "CI"),
                0x1: ("c.lui", "CI"),  # or any != 0 and !=2
            },
            0x4: {  # funct6
                0x20: {  # imm
                    0x0: ("c.srli64", "CB"),
                    0x1: ("c.srli", "CB"),  # or any != 0
                },
                0x21: {  # imm
                    0x0: ("c.srai64", "CB"),
                    0x1: ("c.srai", "CB"),  # or any != 0
                },
                0x22: ("c.andi", "CB"),
                0x23: {  # [6:5]
                    0x0: ("c.sub", "CA"),
                    0x1: ("c.xor", "CA"),
                    0x2: ("c.or", "CA"),
                    0x3: ("c.and", "CA"),
                },
                0x24: ("c.srli", "CB"),
                0x25: ("c.srai", "CB"),
                0x26: ("c.andi", "CB"),
                0x27: {  # [6:5]
                    0x0: ("c.subw", "CA"),
                    0x1: ("c.addw", "CA"),
                },
            },
            0x5: ("c.j", "CJ"),
            0x6: ("c.beqz", "CB"),
            0x7: ("c.bnez", "CB"),
        },
        0x2: {  # funct3
            0x0: {  # imm
                0x0: ("c.slli64", "CI"),
                0x1: ("c.slli", "CI"),  # or any != 0
            },
            0x1: ("c.lqsp", "CI"),
            0x2: ("c.lwsp", "CI"),
            0x3: ("c.ldsp", "CI"),
            0x4: {  # funct4
                0x8: {  # rs2
                    0x0: ("c.jr", "CR"),
                    0x1: ("c.mv", "CR"),  # or any != 0
                },
                0x9: {  # rs2
                    0x0: {  # rs1
                        0x0: ("c.ebreak", "CR"),
                        0x1: ("c.jalr", "CR"),  # or any != 0
                    },
                    0x1: ("c.add", "CR"),  # or any != 0
                },
            },
            0x5: ("c.sqsp", "CSS"),
            0x6: ("c.swsp", "CSS"),
            0x7: ("c.sdsp", "CSS"),
        },
    }
)

FDQ_INSTR_BY_CODES = {
    0x7: {  # funct3
        0x2: "flw",
        0x3: "fld",
        0x4: "flq",
    },
    0x27: {  # funct3
        0x2: "fsw",
        0x3: "fsd",
        0x4: "fsq",
    },
    0x43: {  # funct2
        0x00: "fmadd.s",
        0x01: "fmadd.d",
        0x02: "fmadd.q",
    },
    0x47: {  # funct2
        0x00: "fmsub.s",
        0x01: "fmsub.d",
        0x02: "fmsub.q",
    },
    0x4B: {  # funct2
        0x00: "fnmsub.s",
        0x01: "fnmsub.d",
        0x02: "fnmsub.q",
    },
    0x4F: {  # funct2
        0x00: "fnmadd.s",
        0x01: "fnmadd.d",
        0x02: "fnmadd.q",
    },
    0x53: {  # funct7
        0x0: "fadd.s",
        0x1: "fadd.d",
        0x3: "fadd.q",
        0x4: "fsub.s",
        0x5: "fsub.d",
        0x7: "fsub.q",
        0x8: "fmul.s",
        0x9: "fmul.d",
        0xA: "fmul.q",
        0xC: "fdiv.s",
        0xD: "fdiv.d",
        0xF: "fdiv.q",
        0x10: {  # funct3
            0x0: "fsgnj.s",
            0x1: "fsgnjn.s",
            0x2: "fsgnjx.s",
        },
        0x11: {  # funct3
            0x0: "fsgnj.d",
            0x1: "fsgnjn.d",
            0x2: "fsgnjx.d",
        },
        0x13: {  # funct3
            0x0: "fsgnj.q",
            0x1: "fsgnjn.q",
            0x2: "fsgnjx.q",
        },
        0x14: {  # funct3
            0x0: "fmin.s",
            0x1: "fmax.s",
        },
        0x15: {  # funct3
            0x0: "fmin.d",
            0x1: "fmax.d",
        },
        0x17: {  # funct3
            0x0: "fmin.q",
            0x1: "fmax.q",
        },
        0x50: {  # funct3
            0x0: "fle.s",
            0x1: "flt.s",
            0x2: "feq.s",
        },
        0x51: {  # funct3
            0x0: "fle.d",
            0x1: "flt.d",
            0x2: "feq.d",
        },
        0x53: {  # funct3
            0x0: "fle.q",
            0x1: "flt.q",
            0x2: "feq.q",
        },
        # imm
        0x401: "fcvt.s.d",
        0x403: "fcvt.s.q",
        0x420: "fcvt.d.s",
        0x423: "fcvt.d.q",
        0x460: "fcvt.q.s",
        0x461: "fcvt.q.d",
        0x580: "fsqrt.s",
        0x5A0: "fsqrt.d",
        0x5E0: "fsqrt.q",
        0xC00: "fcvt.w.s",
        0xC01: "fcvt.wu.s",
        0xC02: "fcvt.l.s",
        0xC03: "fcvt.lu.s",
        0xC20: "fcvt.w.d",
        0xC21: "fcvt.wu.d",
        0xC22: "fcvt.l.d",
        0xC23: "fcvt.lu.d",
        0xC60: "fcvt.w.q",
        0xC61: "fcvt.wu.q",
        0xC62: "fcvt.l.q",
        0xC63: "fcvt.lu.q",
        0xD00: "fcvt.s.w",
        0xD01: "fcvt.s.wu",
        0xD02: "fcvt.s.l",
        0xD03: "fcvt.s.lu",
        0xD20: "fcvt.d.w",
        0xD21: "fcvt.d.wu",
        0xD22: "fcvt.d.l",
        0xD23: "fcvt.d.lu",
        0xD60: "fcvt.q.w",
        0xD61: "fcvt.q.wu",
        0xD62: "fcvt.q.l",
        0xD63: "fcvt.q.lu",
        0xE00: {  # funct3
            0x0: "fmv.x.w",
            0x1: "fclass.s",
        },
        0xE20: {  # funct3
            0x0: "fmv.x.d",
            0x1: "fclass.d",
        },
        0xE60: "fclass.q",
        0xF00: "fmv.w.x",
        0xF20: "fmv.d.x",
    },
}


def register_abi_name(reg: int) -> str:
    return {
        0: "zero",
        1: "ra",
        2: "sp",
        3: "gp",
        4: "tp",
        5: "t0",
        6: "t1",
        7: "t2",
        8: "s0/fp",
        9: "s1",
        10: "a0",
        11: "a1",
        12: "a2",
        13: "a3",
        14: "a4",
        15: "a5",
        16: "a6",
        17: "a7",
        18: "s2",
        19: "s3",
        20: "s4",
        21: "s5",
        22: "s6",
        23: "s7",
        24: "s8",
        25: "s9",
        26: "s10",
        27: "s11",
        28: "t3",
        29: "t4",
        30: "t5",
        31: "t6",
    }[reg]


CSR_ADDR: Dict[int, str] = {
    0x1: "fflags",
    0x2: "frm",
    0x3: "fcsr",
    0x100: "sstatus",
    0x104: "sie",
    0x105: "stvec",
    0x106: "scounteren",
    0x10A: "senvcfg",
    0x140: "sscratch",
    0x141: "sepc",
    0x142: "scause",
    0x143: "stval",
    0x144: "sip",
    0x180: "satp",
    0x200: "vsstatus",
    0x204: "vsie",
    0x205: "vstvec",
    0x240: "vsscratch",
    0x241: "vspec",
    0x242: "vscause",
    0x243: "vstval",
    0x244: "vsip",
    0x280: "vsatp",
    0x300: "mstatus",
    0x301: "misa",
    0x302: "medeleg",
    0x303: "mideleg",
    0x304: "mie",
    0x305: "mtvec",
    0x306: "mcounteren",
    0x30A: "menvcfg",
    0x310: "mstatush",
    0x31A: "menvcfgh",
    0x320: "mcountinhibit",
    0x323: "mhpmevent3",
    0x324: "mhpmevent4",
    0x325: "mhpmevent5",
    0x326: "mhpmevent6",
    0x327: "mhpmevent7",
    0x328: "mhpmevent8",
    0x329: "mhpmevent9",
    0x32A: "mhpmevent10",
    0x32B: "mhpmevent11",
    0x32C: "mhpmevent12",
    0x32D: "mhpmevent13",
    0x32E: "mhpmevent14",
    0x32F: "mhpmevent15",
    0x330: "mhpmevent16",
    0x331: "mhpmevent17",
    0x332: "mhpmevent18",
    0x333: "mhpmevent19",
    0x334: "mhpmevent20",
    0x335: "mhpmevent21",
    0x336: "mhpmevent22",
    0x337: "mhpmevent23",
    0x338: "mhpmevent24",
    0x339: "mhpmevent25",
    0x33A: "mhpmevent26",
    0x33B: "mhpmevent27",
    0x33C: "mhpmevent28",
    0x33D: "mhpmevent29",
    0x33E: "mhpmevent30",
    0x33F: "mhpmevent31",
    0x340: "mscratch",
    0x341: "mepc",
    0x342: "mcause",
    0x343: "mtval",
    0x344: "mip",
    0x34A: "mtinst",
    0x34B: "mtval2",
    0x3A0: "pmpcfg0",
    0x3A1: "pmpcfg1",
    0x3A2: "pmpcfg2",
    0x3A3: "pmpcfg3",
    0x3A4: "pmpcfg4",
    0x3A5: "pmpcfg5",
    0x3A6: "pmpcfg6",
    0x3A7: "pmpcfg7",
    0x3A8: "pmpcfg8",
    0x3A9: "pmpcfg9",
    0x3AA: "pmpcfg10",
    0x3AB: "pmpcfg11",
    0x3AC: "pmpcfg12",
    0x3AD: "pmpcfg13",
    0x3AE: "pmpcfg14",
    0x3AF: "pmpcfg15",
    0x3B0: "pmpaddr0",
    0x3B1: "pmpaddr1",
    0x3B2: "pmpaddr2",
    0x3B3: "pmpaddr3",
    0x3B4: "pmpaddr4",
    0x3B5: "pmpaddr5",
    0x3B6: "pmpaddr6",
    0x3B7: "pmpaddr7",
    0x3B8: "pmpaddr8",
    0x3B9: "pmpaddr9",
    0x3BA: "pmpaddr10",
    0x3BB: "pmpaddr11",
    0x3BC: "pmpaddr12",
    0x3BD: "pmpaddr13",
    0x3BE: "pmpaddr14",
    0x3BF: "pmpaddr15",
    0x3C0: "pmpaddr16",
    0x3C1: "pmpaddr17",
    0x3C2: "pmpaddr18",
    0x3C3: "pmpaddr19",
    0x3C4: "pmpaddr20",
    0x3C5: "pmpaddr21",
    0x3C6: "pmpaddr22",
    0x3C7: "pmpaddr23",
    0x3C8: "pmpaddr24",
    0x3C9: "pmpaddr25",
    0x3CA: "pmpaddr26",
    0x3CB: "pmpaddr27",
    0x3CC: "pmpaddr28",
    0x3CD: "pmpaddr29",
    0x3CE: "pmpaddr30",
    0x3CF: "pmpaddr31",
    0x3D0: "pmpaddr32",
    0x3D1: "pmpaddr33",
    0x3D2: "pmpaddr34",
    0x3D3: "pmpaddr35",
    0x3D4: "pmpaddr36",
    0x3D5: "pmpaddr37",
    0x3D6: "pmpaddr38",
    0x3D7: "pmpaddr39",
    0x3D8: "pmpaddr40",
    0x3D9: "pmpaddr41",
    0x3DA: "pmpaddr42",
    0x3DB: "pmpaddr43",
    0x3DC: "pmpaddr44",
    0x3DD: "pmpaddr45",
    0x3DE: "pmpaddr46",
    0x3DF: "pmpaddr47",
    0x3E0: "pmpaddr48",
    0x3E1: "pmpaddr49",
    0x3E2: "pmpaddr50",
    0x3E3: "pmpaddr51",
    0x3E4: "pmpaddr52",
    0x3E5: "pmpaddr53",
    0x3E6: "pmpaddr54",
    0x3E7: "pmpaddr55",
    0x3E8: "pmpaddr56",
    0x3E9: "pmpaddr57",
    0x3EA: "pmpaddr58",
    0x3EB: "pmpaddr59",
    0x3EC: "pmpaddr60",
    0x3ED: "pmpaddr61",
    0x3EE: "pmpaddr62",
    0x3EF: "pmpaddr63",
    0x5A8: "scontext",
    0x600: "hstatus",
    0x602: "hedeleg",
    0x603: "hideleg",
    0x604: "hie",
    0x605: "htimedelta",
    0x606: "hcounteren",
    0x607: "hgeie",
    0x60A: "henvcfg",
    0x615: "htimedeltah",
    0x61A: "henvcfgh",
    0x643: "htval",
    0x644: "hip",
    0x645: "hvip",
    0x64A: "htinst",
    0x680: "hgatp",
    0x6A8: "hcontext",
    0x747: "mseccfg",
    0x757: "mseccfgh",
    0x7A0: "tselect",
    0x7A1: "tdata1",
    0x7A2: "tdata2",
    0x7A3: "tdata3",
    0x7B0: "dcsr",
    0x7B1: "dpc",
    0x7B2: "dscratch0",
    0x7B3: "dscratch1",
    0x7B8: "mcontext",
    0xB00: "mcycle",
    0xB02: "minstret",
    0xB03: "mhpmcounter3",
    0xB04: "mhpmcounter4",
    0xB05: "mhpmcounter5",
    0xB06: "mhpmcounter6",
    0xB07: "mhpmcounter7",
    0xB08: "mhpmcounter8",
    0xB09: "mhpmcounter9",
    0xB0A: "mhpmcounter10",
    0xB0B: "mhpmcounter11",
    0xB0C: "mhpmcounter12",
    0xB0D: "mhpmcounter13",
    0xB0E: "mhpmcounter14",
    0xB0F: "mhpmcounter15",
    0xB10: "mhpmcounter16",
    0xB11: "mhpmcounter17",
    0xB12: "mhpmcounter18",
    0xB13: "mhpmcounter19",
    0xB14: "mhpmcounter20",
    0xB15: "mhpmcounter21",
    0xB16: "mhpmcounter22",
    0xB17: "mhpmcounter23",
    0xB18: "mhpmcounter24",
    0xB19: "mhpmcounter25",
    0xB1A: "mhpmcounter26",
    0xB1B: "mhpmcounter27",
    0xB1C: "mhpmcounter28",
    0xB1D: "mhpmcounter29",
    0xB1E: "mhpmcounter30",
    0xB1F: "mhpmcounter31",
    0xB80: "mcycleh",
    0xB82: "minstreth",
    0xB83: "mhpmcounter3h",
    0xB84: "mhpmcounter4h",
    0xB85: "mhpmcounter5h",
    0xB86: "mhpmcounter6h",
    0xB87: "mhpmcounter7h",
    0xB88: "mhpmcounter8h",
    0xB89: "mhpmcounter9h",
    0xB8A: "mhpmcounter10h",
    0xB8B: "mhpmcounter11h",
    0xB8C: "mhpmcounter12h",
    0xB8D: "mhpmcounter13h",
    0xB8E: "mhpmcounter14h",
    0xB8F: "mhpmcounter15h",
    0xB90: "mhpmcounter16h",
    0xB91: "mhpmcounter17h",
    0xB92: "mhpmcounter18h",
    0xB93: "mhpmcounter19h",
    0xB94: "mhpmcounter20h",
    0xB95: "mhpmcounter21h",
    0xB96: "mhpmcounter22h",
    0xB97: "mhpmcounter23h",
    0xB98: "mhpmcounter24h",
    0xB99: "mhpmcounter25h",
    0xB9A: "mhpmcounter26h",
    0xB9B: "mhpmcounter27h",
    0xB9C: "mhpmcounter28h",
    0xB9D: "mhpmcounter29h",
    0xB9E: "mhpmcounter30h",
    0xB9F: "mhpmcounter31h",
    0xC00: "cycle",
    0xC01: "time",
    0xC02: "instret",
    0xC03: "hpmcounter3",
    0xC04: "hpmcounter4",
    0xC05: "hpmcounter5",
    0xC06: "hpmcounter6",
    0xC07: "hpmcounter7",
    0xC08: "hpmcounter8",
    0xC09: "hpmcounter9",
    0xC0A: "hpmcounter10",
    0xC0B: "hpmcounter11",
    0xC0C: "hpmcounter12",
    0xC0D: "hpmcounter13",
    0xC0E: "hpmcounter14",
    0xC0F: "hpmcounter15",
    0xC10: "hpmcounter16",
    0xC11: "hpmcounter17",
    0xC12: "hpmcounter18",
    0xC13: "hpmcounter19",
    0xC14: "hpmcounter20",
    0xC15: "hpmcounter21",
    0xC16: "hpmcounter22",
    0xC17: "hpmcounter23",
    0xC18: "hpmcounter24",
    0xC19: "hpmcounter25",
    0xC1A: "hpmcounter26",
    0xC1B: "hpmcounter27",
    0xC1C: "hpmcounter28",
    0xC1D: "hpmcounter29",
    0xC1E: "hpmcounter30",
    0xC1F: "hpmcounter31",
    0xC80: "cycleh",
    0xC81: "timeh",
    0xC82: "instreth",
    0xC83: "hpmcounter3h",
    0xC84: "hpmcounter4h",
    0xC85: "hpmcounter5h",
    0xC86: "hpmcounter6h",
    0xC87: "hpmcounter7h",
    0xC88: "hpmcounter8h",
    0xC89: "hpmcounter9h",
    0xC8A: "hpmcounter10h",
    0xC8B: "hpmcounter11h",
    0xC8C: "hpmcounter12h",
    0xC8D: "hpmcounter13h",
    0xC8E: "hpmcounter14h",
    0xC8F: "hpmcounter15h",
    0xC90: "hpmcounter16h",
    0xC91: "hpmcounter17h",
    0xC92: "hpmcounter18h",
    0xC93: "hpmcounter19h",
    0xC94: "hpmcounter20h",
    0xC95: "hpmcounter21h",
    0xC96: "hpmcounter22h",
    0xC97: "hpmcounter23h",
    0xC98: "hpmcounter24h",
    0xC99: "hpmcounter25h",
    0xC9A: "hpmcounter26h",
    0xC9B: "hpmcounter27h",
    0xC9C: "hpmcounter28h",
    0xC9D: "hpmcounter29h",
    0xC9E: "hpmcounter30h",
    0xC9F: "hpmcounter31h",
    0xE12: "hgeip",
    0xF11: "mvendorid",
    0xF12: "marchid",
    0xF13: "mimpid",
    0xF14: "mhartid",
    0xF15: "mconfigptr",
}
